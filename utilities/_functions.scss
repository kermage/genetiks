// ==================================================
// TABLE OF CONTENTS
// --------------------------------------------------
//  * Pseudo
//  * Unicode
//  * Strip unit
//  * Clamp number
//  * Conversion
//      - Pixel to em
//      - Pixel to rem
//      - Back to px
//      - Map to List
//  * Calculator
//      - Baseline grid
//      - Spacer
//  * List
//      - Prepend a value
//      - Insert a value at index n
//      - Remove the nth item
//  * Color
//      - Mix amount of black
//      - Mix amount of white
// ==================================================

@use "sass:color";
@use "sass:list";
@use "sass:math";
@use "sass:string";


//
// Add pseudo element to values in list
//
// **************************************************

@function pseudo($values, $element) {
	$list: ();

	@each $value in $values {
		$value: $value + ':' + $element;
		$list: list.append($list, $value, comma);
	}

	@return $list;
}


//
// Prevent unicode character conversion
//
// **************************************************

@function unicode($string) {
	@return string.unquote('"') + string.unquote(string.insert(#{$string}, '\\', 1)) + string.unquote('"');
}


//
// Strip unit from a number
//
// **************************************************

@function strip-unit($value) {
	@return math.div($value, $value * 0 + 1);
}


//
// Clamp a number between two other numbers
//
// **************************************************

@function clamp-number($value, $min, $max) {
	@return math.min(math.max($value, $min), $max);
}


//
// Conversion
//
// **************************************************

$font-size-base: 1rem !default;
$line-height-base: 1.5 !default;


//
// Pixel to em
//

@function em($value, $base: $font-size-base) {
	$value: px($value);
	$base: px($base);

	@return math.div($value, $base) * 1em;
}


//
// Pixel to rem
//

@function rem($value, $base: $font-size-base) {
	$value: px($value);
	$base: px($base);

	@return math.div($value, $base) * 1rem;
}


//
// Back to px
//

@function px($value, $base: $font-size-base) {
	$unit: math.unit($value);
	$value: strip-unit($value);

	@if (($unit == '') or ($unit == 'px')) {
		$base: 1;
	}

	$unit: math.unit($base);

	@if (($unit == 'em') or ($unit == 'rem')) {
		$base: 16 * $base;
	}

	@return $value * strip-unit($base) * 1px;
}


//
// Map to List
//

@function map-to-list($value) {
	$keys: ();
	$values: ();

	@each $key, $val in $value {
		$keys: list.append($keys, $key);
		$values: list.append($values, $val);
	}

	@return list.zip($keys, $values);
}


//
// Calculator
//
// **************************************************

$spacer: rem($font-size-base * $line-height-base) !default;


//
// Spacer
//

@function spacer($amount: 1, $unit: null) {
	$value: $spacer;
	$amount: strip-unit($amount);

	@if $unit == 'px' {
		$value: px($spacer);
	} @else if $unit == 'em' {
		$value: em($spacer);
	} @else if $unit == 'rem' {
		$value: rem($spacer);
	}

	@return $value * $amount;
}


//
// Calculate the baseline grid
//

@function base-line($size: $font-size-base) {
	$base-value: px($size);
	$font-value: px($font-size-base);
	$line-value: px($line-height-base);
	$font-line: $font-value * $line-value;

	$span: math.ceil(math.div($base-value, $font-line));

	@if ((($span * $font-line) - $base-value) < 2) {
		$span: $span + 1;
	}

	@return math.div($span * $font-line, $base-value);
}


//
// List
//
// **************************************************


//
// Prepend a value
//

@function prepend($list, $value) {
	@return list.join($value, $list);
}


//
// Insert a value at index n
//

@function insert-nth($list, $index, $value) {
	$result: ();

	@for $i from 1 through list.length($list) {
		@if $i == $index {
			$result: list.append($result, $value);
		}

		$result: list.append($result, list.nth($list, $i));
	}

	@return $result;
}


//
// Remove the nth item
//

@function unset-nth($list, $index) {
	$result: ();

	@for $i from 1 through list.length($list) {
		@if $i != $index {
			$result: list.append($result, list.nth($list, $i));
		}
	}

	@return $result;
}


//
// Color
//
// **************************************************


//
// Mix amount of black
//

@function shade($color, $percent: 50%) {
	@return color.mix(#000, $color, $percent);
}


//
// Mix amount of white
//

@function tint($color, $percent: 50%) {
	@return color.mix(#fff, $color, $percent);
}
